
http://github.com/nagcloudlab/automation-testing

----------------------------------------------------------------
1. project
----------------------------------------------------------------

my-bank
    |
    |---p1 ( .java / .class)
    |
    |---p2
    |
    |


----------------------------------------------------------------
2. java file
----------------------------------------------------------------    


Name.java
------------------------------
| package declaration ( one )
| import statements ( many )
| public Type ( class | interface | enum | annotation) Name ( one )
| Type ( class | interface | enum | annotation) Name ( many)
|------------------------------


----------------------------------------------------------------
3. package syntax
----------------------------------------------------------------    

why we need package declaration for java file ?

 => to organize related java files

 syntax:

 package name;

 recommended guidelines for package declaration:

 e.g TransferTestCase.java

        module => transfer
        project => project
        company => albilad
        type of company => commercial

e.g
package com.albilad.project.transfer;        


----------------------------------------------------------------
4. import statement syntax
----------------------------------------------------------------

why we need import statement for java file?

to refer any type from different packages

mybank
    |
    | --- p1 ( A.java , B.java )
    |   
    |
    | --- p2 ( C.java , D.java )
    |


e.g
    
    package p1;
    import p2.C;

    public class A{
        C c;
    }

----------------------------------------------------------------
3. Data Type(s)
----------------------------------------------------------------       

2 types data types

    1. values / primitives e.g amount
    2. objects / reference e.g account

---------------------------------------------------------------
3.1. Value Type(s)
----------------------------------------------------------------       

java has 8 value types

    whole-number values

        1. byte ( 8 )
        2. short ( 16 )
        3. int ( 32 )
        4. long ( 64 )

    real/decimal-number values

        5. float ( 32 )
        6. double ( 64 )

    character

        7. char ( 16 )

    boolean

        8. boolean ( 1 )


---------------------------------------------------------------
3.2. Object
----------------------------------------------------------------       

what is an object ?
    - info / data / properties / attributes => State
    - function / method / operation / work  => Behavior
    - reference / address / location => Identity

how to create an object ?
    to create similar objects, we need obj's template a.k.a class

what is class ?
    => blue-print/definition/design of an object

---------------------------------------------------------------
Object Concepts
---------------------------------------------------------------

1. Abstraction
        => obj's easy use/learn by dependent object
2. Encapulation
        => Hide obj's imlementation
3. Inheritance
        => re-use State/Behavior from generalized-type to specilized-type
4. Polymorphism ( many forms )
        => obj' shud have/change behav, based on input/envi 

---------------------------------------------------------------
4. Class syntax
----------------------------------------------------------------

class TestEmployee {
   // State definition ( variables )
   // Constructor
   // Behavior         ( methods )
}


---------------------------------------------------------------
5. Variable syntax
----------------------------------------------------------------



 ________ Type varName = [value / obj's reference]
 [static]   
 [final ]



---------------------------------------------------------------
6. Constructor syntax
---------------------------------------------------------------

how to create object in java ?

    2 steps

    step-1 : memory allocation at runtime => new 
    step-2 : intialize that memory with obj's data => constructor

   
    syntax:

    ClassName([input]){
        // intialization logic
    }

     ClassName e1=new ClassName() ==> object 



---------------------------------------------------------------
7. Method syntax
---------------------------------------------------------------

   ________ ReturnType methodName([input]){ 
   [static]
                // operators 
                // conditional statements
                // loops
                // invoke other methods
                result => Value / Object
            }

    ReturnType
        - void
        - value
        - obj's type

---------------------------------------------------------------
java lang naming conventions

keywords ==> lower-case
package names ==> lower-case
type names => pascal-case e.g A____B___C___ e.g TestingEmploee
var / methods => camel-case e.g ____A___B____ e.g myName

const variables ==> Upper-case e.g COUNTRY

---------------------------------------------------------------

